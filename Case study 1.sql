select * from fact

select * from Location

select * from Product

---29. Display the ASCII value of the fifth character from the column Product.

select ASCII('A')

select product, substring(product,5,1) as fifth_character,
ASCII (substring(product,5,1)) as ASCII_VALUE
from product

---28. Delete the records in the ProductTable for regular type.

beign transcation
delete from product where type = 'regular' 

rollback transaction

---27. Display the date, product ID and sales where total expenses are between 100 to 200. 

select date, productid, sales, total_expenses from fact
where total_expenses between 100 and 200

---26. Change the product type from coffee to tea where product ID is 1 and
undo it.

update product set product_type = 'tea' where product_type='coffee'

--to check
select * from product

--undo it
rollback transaction 

---25. Create a user-defined function for the product table to fetch a particular
product type based upon the user’s preference.

--function creation

create function user_choice (@val varchar(30)) -- input declaration
returns table -- output declaration
as return
select * from product where product_type =@val

--calling function

select * from [dbo].[user_choice]('herbal_tea') 

---24. Apply union and intersection operator on the tables which consist of
attribute area code.

select area_code from fact 
union
select area_code from location

select area_code from fact
intersect
select area_code from location

---23. Give the total weekly sales value with the date and product ID details.
Use roll-up to pull the data in hierarchical order.

select date, productid, sum(sales) from facts
group by date,productid
with rollup

---22. Write a query by creating a condition in which if the total expenses is
less than 60 then it is a profit or else loss.

select total_expenses,iif(total_expenses <60,'profit','loss')as profit_loss_status
from facts

---21. Create a stored procedure to fetch the result according to the product
type from ProductTable.

--procedure calling
create procedure prodtype (@val varchar(30))
as
select * from product where product_type = @val

--calling procedure
exce prodtype @val = 'tea'
exce prodtype 'herbal tea'

---20. Find the maximum profit along with the product ID and product type.

fact, product (joins, aggregrate function)
select productid, product_type, profit from fact
join
product 
on
fact.productid=product.productid
where profit = (select max(profit) from fact)

---19. If there is an increase in sales of 5%, calculate the increased sales.

select sales as actual_sales, sales * 1.05 as increased_sales from fact

---18. Find the state wise profit and sales along with the product name.

--fact, location, product

select state, product, profit, sales from fact
join
product
on fact.productid=product.productid
join
loaction
on
fact.area_code=loaction.area_code
group by state

---17. Find the state wise profit and sales.

select state, sum(profit)as profit, sum(sales)as sales ffrom fact
join
loaction
on fact.area_code=location.area_code
group by state

---16. Display the rank without any gap to show the sales wise rank.

select productid, sales, date, dense_rank()over(order by sales desc) as sales_rank
from fact

---15. Display the table with the following attributes such as
date, product ID, product_type, product, sales, profit, state, area_code

select date, product_id, product_type, product, sales, profit, state, area_code
select * from product;

---14. Display the average total expense of each product ID on an individual
date.

select date, product_id,avg(total_expense)as average_expense
from expense
group by date, product_id;

---13. What is the total sales done on date 2010-01-01?

select sum(sales_amount) as total_sales
from sales
where date = '2010-01-01';

---12. Display the average budget margin where the average budget margin
should be greater than 100.

select avg(budget_margin)as average_budget_margin
from fact_table
having avg(budget_margin)>100;

---11. Display state in a sequential order in a LocationTable.

select state
from loaction_table
order by state;

---10. Display the average inventory for each product ID.

select product_id, avg(inventory) as average_inventory
from fact_table
group by product_id;

---9. Find out the total profit generated by Colorado state.

select sum(profit)as total profit
from sales
where state ='colorado';

---8. What is the average sales in area code 719?

select avg(salesamount) as average sales
from sales
where area code='719';

---7. Display the details where total expenses are greater than 40.

select expenseid, expensedetails, expenseamount
from expenses
where expenseamount > 40;

---6. Display the details of the product ID where product type is coffee.
 
select productid, product details
from product where product type = 'coffee';

---5. Display the max Cost of Good Sold (COGS).

select max(cogs)as maxcogs
from sales;

---4. What is the minimum sales of a product?

select min(saleamount) as min sale amount
from sale;

---3. How much spending has been done on marketing of product ID 1?

select sum(expenseamount) as total expense
from marketing expense where productid ='1';

---2. How many products are of regular type?

select count(*) as regular product count
from product where producttype = 'regular';

---1. Display the number of states present in the LocationTable.

select count(disntinct state) as statecount
from loaction;







